import numpy as np
from numpy.linalg import norm, eig

#-_____________COST FUNCTION A___________________
#COST FUNCTION A
def V_a(x):
    a = np.array([5])
    b = np.array([1, 4, 5, 4, 2, 1])
    C = [[9, 1, 7, 5, 4, 7], 
        [1, 11, 4, 2, 7, 5], 
        [7, 4, 13, 5, 0, 7], 
        [5, 2, 5, 17, 1, 9], 
        [4, 7, 0, 1, 21, 15], 
        [7, 5, 7, 9, 5, 27]]
    C = np.array(C)
    return 5 + b@x + x @ (C @ x)

def gradV_a(x):
    b = np.array([1, 4, 5, 4, 2, 1])
    C = [[9, 1, 7, 5, 4, 7], 
        [1, 11, 4, 2, 7, 5], 
        [7, 4, 13, 5, 0, 7], 
        [5, 2, 5, 17, 1, 9], 
        [4, 7, 0, 1, 21, 15], 
        [7, 5, 7, 9, 5, 27]]
    C = np.array(C)
    return b + 2 * C @ x
#_________________________________________________


#-_____________COST FUNCTION B___________________
def V_b(x):
    x1, x2 = x
    num = ((x1**2 + 1)*(2*x2**2 + 1))**0.5
    den = x1**2 + x2**2 + 0.5
    return -num / den

def gradV_b(x):
    x1, x2 = x

    num = (-x1**3 + x1*x2**2 - 1.5*x1)*(2*x2**2+1)**0.5
    den = (x1**2 + x2**2 + 0.5)**2 * (x1**2 + 1)**0.5
    dx1 = -num / den

    num = (-2*x2**3 + 2*x2*x1**2 - x2)*(x1**2+1)**0.5
    den = (x1**2 + x2**2 + 0.5)**2 * (2*x2**2 + 1)**0.5
    dx2 = -num / den

    return np.array([x1,x2])
#_________________________________________________
